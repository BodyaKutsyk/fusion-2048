{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/scripts/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $2806d5ddb68cb1e7$exports = {};\n\"use strict\";\nclass $2806d5ddb68cb1e7$var$GameClass {\n    constructor(DOM_CELLS){\n        this.HTML_CELLS = DOM_CELLS;\n        this.HTML_MATRIX = [];\n        this.madeMove = false;\n        this.isGameStarted = false;\n        this.winStatus = false;\n        this.score = 0;\n    }\n    randomNumber(min, max) {\n        return Math.floor(Math.random() * (max - min) + min);\n    }\n    static makeMatrix(array) {\n        const OUTPUT_ARRAY = [];\n        let counter = 0;\n        if (!array) for(let i = 0; i < 4; i++){\n            OUTPUT_ARRAY.push([]);\n            for(let j = 0; j < 4; j++)OUTPUT_ARRAY[i].push(0);\n        }\n        if (array) for(let row = 0; row < array.length / 4; row++){\n            OUTPUT_ARRAY.push([]);\n            for(let column = 0; column < array.length / 4; column++){\n                OUTPUT_ARRAY[row].push(array[counter]);\n                counter++;\n            }\n        }\n        return OUTPUT_ARRAY;\n    }\n    rotateMatrix(matrix) {\n        const matrixCopy = matrix.map((elem)=>[\n                ...elem\n            ]);\n        for(let row = 0; row < matrix.length; row++)for(let column = 0; column < matrix[row].length; column++)matrixCopy[row][column] = matrix[matrix.length - 1 - column][row];\n        return matrixCopy;\n    }\n    reverseRotate(matrix) {\n        const matrixCopy = matrix.map((elem)=>[\n                ...elem\n            ]);\n        for(let row = 0; row < matrix.length; row++)for(let column = 0; column < matrix[row].length; column++)matrixCopy[row][column] = matrix[column][matrix[row].length - 1 - row];\n        return matrixCopy;\n    }\n    randomCell(matrix) {\n        const FREE_FIELD_CELLS = [];\n        for(let row = 0; row < matrix.length; row++){\n            const tempRow = [\n                row\n            ];\n            for(let column = 0; column < matrix[row].length; column++)if (matrix[row][column] === 0) tempRow.push(column);\n            if (tempRow.length > 1) FREE_FIELD_CELLS.push(tempRow);\n        }\n        const INDEX_OF_RANDOM_ROW = this.randomNumber(0, FREE_FIELD_CELLS.length);\n        const RANDOM_ROW = FREE_FIELD_CELLS[INDEX_OF_RANDOM_ROW];\n        if (RANDOM_ROW) {\n            const RANDOM_CELL = this.randomNumber(1, RANDOM_ROW.length);\n            const CELL_VALUE = Math.random() < 0.9 ? 2 : 4;\n            const selectedRow = RANDOM_ROW[0];\n            const selectedColumn = RANDOM_ROW[RANDOM_CELL];\n            matrix[selectedRow][selectedColumn] = CELL_VALUE;\n            return [\n                selectedRow,\n                selectedColumn\n            ];\n        }\n    }\n    canMoveVerticaly(matrix) {\n        for(let i = 0; i < matrix.length; i++)for(let j = 0; j < matrix[i].length - 1; j++){\n            if (matrix[i][j] === matrix[i][j + 1]) return true;\n        }\n        return false;\n    }\n    canMoveHorizontaly(matrix) {\n        for(let i = 0; i < matrix.length - 1; i++)for(let j = 0; j < matrix[i].length; j++){\n            if (matrix[i][j] === matrix[i + 1][j]) return true;\n        }\n        return false;\n    }\n    hasEmptySpace(matrix) {\n        for(let i = 0; i < matrix.length; i++)for(let j = 0; j < matrix[i].length; j++){\n            if (matrix[i][j] === 0) return true;\n        }\n        return false;\n    }\n    moveLeft(matrix, row, data, repeat) {\n        const moveCount = this.moveList;\n        const tempRow = matrix[row];\n        for(let column = 0; column < tempRow.length; column++)if (tempRow[column] !== 0) {\n            let columnCopy = column;\n            for(let i = column - 1; i >= 0; i--)if (tempRow[i] === 0) {\n                if (!repeat) {\n                    tempRow[i] = tempRow[columnCopy];\n                    moveCount[row][column]++;\n                    tempRow[columnCopy] = 0;\n                    if (!data[column].after) {\n                        data[column].after = column;\n                        data[column].before = column;\n                    }\n                    data[column].after--;\n                    data[column].before = column;\n                    columnCopy--;\n                }\n                if (repeat) {\n                    let isObjectEmpty = true;\n                    tempRow[i] = tempRow[columnCopy];\n                    tempRow[columnCopy] = 0;\n                    data.forEach((elem)=>{\n                        if (elem.after === columnCopy) {\n                            moveCount[row][elem.before]++;\n                            isObjectEmpty = false;\n                        }\n                    });\n                    if (isObjectEmpty) {\n                        for(let limith = column; limith < tempRow.length; limith++)if (tempRow[limith] === 0) moveCount[row][limith]++;\n                    }\n                }\n            }\n        }\n        return tempRow;\n    }\n    moveRight(matrix, row, data, repeat) {\n        const moveCount = this.moveList;\n        const tempRow = matrix[row];\n        for(let column = tempRow.length - 1; column >= 0; column--)if (tempRow[column] !== 0) {\n            let columnCopy = column;\n            for(let i = column + 1; i < tempRow.length; i++)if (tempRow[i] === 0) {\n                if (!repeat) {\n                    tempRow[i] = tempRow[columnCopy];\n                    moveCount[row][column]++;\n                    tempRow[columnCopy] = 0;\n                    if (!data[column].after) data[column].after = column;\n                    data[column].after++;\n                    data[column].before = column;\n                    columnCopy++;\n                }\n                if (repeat) {\n                    let isObjectEmpty = true;\n                    tempRow[i] = tempRow[columnCopy];\n                    tempRow[columnCopy] = 0;\n                    data.forEach((elem)=>{\n                        if (elem.after === columnCopy) {\n                            moveCount[row][elem.before]++;\n                            isObjectEmpty = false;\n                        }\n                    });\n                    if (isObjectEmpty) {\n                        for(let limith = column; limith >= 0; limith--)if (tempRow[limith] === 0) moveCount[row][limith]++;\n                    }\n                }\n            }\n        }\n        return tempRow;\n    }\n    mergeLeft(tempRow, data, moveCount) {\n        for(let i = 0; i < tempRow.length; i++)if (tempRow[i] === tempRow[i + 1] && tempRow[i] !== 0) {\n            tempRow[i] += tempRow[i + 1];\n            this.score += tempRow[i];\n            let isObjectEmpty = true;\n            data.forEach((elem)=>{\n                if (elem.after === i + 1) {\n                    moveCount[elem.before]++;\n                    isObjectEmpty = false;\n                }\n            });\n            if (isObjectEmpty) moveCount[i + 1]++;\n            tempRow[i + 1] = 0;\n            i++;\n        }\n    }\n    mergeRight(tempRow, data, moveCount) {\n        for(let i = tempRow.length - 1; i >= 0; i--)if (tempRow[i] === tempRow[i - 1] && tempRow[i] !== 0) {\n            tempRow[i] += tempRow[i - 1];\n            this.score += tempRow[i];\n            let isObjectEmpty = true;\n            data.forEach((elem)=>{\n                if (elem.after === i - 1) {\n                    moveCount[elem.before]++;\n                    isObjectEmpty = false;\n                }\n            });\n            if (isObjectEmpty) moveCount[i - 1]++;\n            tempRow[i - 1] = 0;\n            i--;\n        }\n    }\n    moveField(field, direction, moveCount) {\n        const reversedField = this.rotateMatrix(field);\n        for(let i = 0; i < field.length; i++){\n            let tempRow = field[i];\n            const moveData = [\n                {},\n                {},\n                {},\n                {}\n            ];\n            let repeat = 0;\n            switch(direction){\n                case \"ArrowLeft\":\n                    tempRow = this.moveLeft(field, i, moveData, repeat);\n                    repeat = 1;\n                    this.mergeLeft(tempRow, moveData, moveCount[i]);\n                    field[i] = tempRow;\n                    field[i] = this.moveLeft(field, i, moveData, repeat);\n                    break;\n                case \"ArrowRight\":\n                    tempRow = this.moveRight(field, i, moveData, repeat);\n                    repeat = 1;\n                    this.mergeRight(tempRow, moveData, moveCount[i]);\n                    field[i] = tempRow;\n                    field[i] = this.moveRight(field, i, moveData, repeat);\n                    break;\n                case \"ArrowUp\":\n                    tempRow = this.moveRight(reversedField, i, moveData, repeat);\n                    repeat = 1;\n                    this.mergeRight(tempRow, moveData, moveCount[i]);\n                    field[i] = tempRow;\n                    field[i] = this.moveRight(reversedField, i, moveCount, moveData, repeat);\n                    break;\n                case \"ArrowDown\":\n                    tempRow = this.moveLeft(reversedField, i, moveData, repeat);\n                    repeat = 1;\n                    this.mergeLeft(tempRow, moveData, moveCount[i]);\n                    field[i] = tempRow;\n                    field[i] = this.moveLeft(reversedField, i, moveData, repeat);\n                    break;\n            }\n        }\n        if (direction === \"ArrowUp\" || direction === \"ArrowDown\") {\n            field.forEach((elem, i)=>{\n                field[i] = this.reverseRotate(reversedField)[i];\n            });\n            this.moveList = this.reverseRotate(moveCount);\n        }\n    }\n    visualize(direction, prevField) {\n        const field = this.FIELD;\n        const htmlField = this.HTML_MATRIX;\n        const moveCount = this.moveList;\n        let prevFieldCopy = prevField;\n        if (!prevField) prevFieldCopy = field;\n        let counter = 0;\n        let canMove = true;\n        for(let i = 0; i < prevFieldCopy.length; i++){\n            for(let j = 0; j < prevFieldCopy[i].length; j++)if (prevFieldCopy[i][j] === field[i][j]) counter++;\n        }\n        if (counter === field.length * field.length) canMove = false;\n        for(let row = 0; row < prevFieldCopy.length; row++)for(let column = 0; column < prevFieldCopy[row].length; column++){\n            while(htmlField[row][column].firstChild)htmlField[row][column].removeChild(htmlField[row][column].lastChild);\n            const HTML_CELL = document.createElement(\"div\");\n            HTML_CELL.innerText = \"\";\n            HTML_CELL.classList = \"\";\n            if (prevFieldCopy[row][column] > 0) {\n                HTML_CELL.style.zIndex = \"2\";\n                HTML_CELL.innerText = `${prevFieldCopy[row][column]}`;\n                this.animateMovement(HTML_CELL, direction, moveCount[row][column]);\n                HTML_CELL.classList = `\n          field-cell\n          field-cell--inner-block\n          field-cell--${prevFieldCopy[row][column]}`;\n                htmlField[row][column].appendChild(HTML_CELL);\n            }\n        }\n        setTimeout(()=>{\n            for(let row = 0; row < field.length; row++)for(let column = 0; column < field[row].length; column++){\n                const HTML_EL = htmlField[row][column];\n                while(HTML_EL.firstChild)HTML_EL.removeChild(HTML_EL.lastChild);\n                const HTML_CELL = document.createElement(\"div\");\n                HTML_CELL.innerText = \"\";\n                HTML_CELL.classList = \"\";\n                if (field[row][column] > 0) {\n                    HTML_CELL.style.zIndex = \"2\";\n                    HTML_CELL.innerText = `${field[row][column]}`;\n                    HTML_CELL.classList = `\n            field-cell\n            field-cell--inner-block\n            field-cell--${field[row][column]}`;\n                    htmlField[row][column].appendChild(HTML_CELL);\n                }\n                moveCount[row][column] = 0;\n            }\n            if (this.hasEmptySpace(field) && canMove && this.madeMove) {\n                const HTML_CELL = document.createElement(\"div\");\n                setTimeout(()=>{\n                    const COORDS = this.randomCell(field);\n                    HTML_CELL.innerText = `${field[COORDS[0]][COORDS[1]]}`;\n                    HTML_CELL.classList = `\n          field-cell\n          field-cell--inner-block\n          only-created\n          field-cell--${field[COORDS[0]][COORDS[1]]}`;\n                    htmlField[COORDS[0]][COORDS[1]].appendChild(HTML_CELL);\n                }, 100);\n            }\n        }, 50);\n    }\n    animateMovement(HTML_CELL, direction, MOVE_SCORE) {\n        const SELL_SIZE = 85;\n        const TOTAL_PATH = SELL_SIZE * MOVE_SCORE;\n        let moveDirection = \"\";\n        let movement = 0;\n        switch(direction){\n            case \"ArrowUp\":\n                moveDirection = \"top\";\n                break;\n            case \"ArrowDown\":\n                moveDirection = \"bottom\";\n                break;\n            case \"ArrowLeft\":\n                moveDirection = \"left\";\n                break;\n            case \"ArrowRight\":\n                moveDirection = \"right\";\n                break;\n        }\n        HTML_CELL.style[moveDirection] = \"0px\";\n        HTML_CELL.style.zIndex = \"1\";\n        setTimeout(()=>{\n            movement += TOTAL_PATH / MOVE_SCORE;\n            if (movement >= TOTAL_PATH) movement = TOTAL_PATH;\n            HTML_CELL.style[moveDirection] = -TOTAL_PATH + \"px\";\n        }, 10);\n    }\n    checkWinState() {\n        const FIELD = this.FIELD;\n        FIELD.forEach((row)=>{\n            row.forEach((column)=>{\n                if (column === 2048) this.winStatus = true;\n            });\n        });\n        return this.winStatus;\n    }\n}\n$2806d5ddb68cb1e7$exports = {\n    GameClass: $2806d5ddb68cb1e7$var$GameClass\n};\n\n\nvar $09e991522ca7e64e$require$GameClass = $2806d5ddb68cb1e7$exports.GameClass;\nconst $09e991522ca7e64e$var$HTML_CELLS = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$Game = new $09e991522ca7e64e$require$GameClass($09e991522ca7e64e$var$HTML_CELLS);\n$09e991522ca7e64e$var$Game.FIELD = $09e991522ca7e64e$require$GameClass.makeMatrix();\n$09e991522ca7e64e$var$Game.moveList = $09e991522ca7e64e$require$GameClass.makeMatrix();\n$09e991522ca7e64e$var$Game.HTML_MATRIX = $09e991522ca7e64e$require$GameClass.makeMatrix($09e991522ca7e64e$var$HTML_CELLS);\nfunction $09e991522ca7e64e$var$eventListener(keyEvent) {\n    const PREV_FIELD = $09e991522ca7e64e$var$Game.FIELD.map((elem)=>[\n            ...elem\n        ]);\n    $09e991522ca7e64e$var$Game.madeMove = true;\n    $09e991522ca7e64e$var$Game.moveField($09e991522ca7e64e$var$Game.FIELD, keyEvent.key, $09e991522ca7e64e$var$Game.moveList);\n    $09e991522ca7e64e$var$Game.visualize(keyEvent.key, PREV_FIELD);\n    for(let i = 0; i < $09e991522ca7e64e$var$Game.moveList.length; i++)for(let j = 0; j < $09e991522ca7e64e$var$Game.moveList.length; j++)$09e991522ca7e64e$var$Game.moveList[i][j] = 0;\n    document.querySelector(\".game-score\").innerText = `${$09e991522ca7e64e$var$Game.score}`;\n    if (!$09e991522ca7e64e$var$Game.canMoveHorizontaly($09e991522ca7e64e$var$Game.FIELD) && !$09e991522ca7e64e$var$Game.canMoveVerticaly($09e991522ca7e64e$var$Game.FIELD) && !$09e991522ca7e64e$var$Game.hasEmptySpace($09e991522ca7e64e$var$Game.FIELD)) {\n        document.querySelector(\".game-field__game-over\").style.display = \"flex\";\n        document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$eventListener);\n        setTimeout(()=>{\n            document.querySelector(\".game-field__game-over\").style.opacity = \"1\";\n            document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n        }, 10);\n    } else if ($09e991522ca7e64e$var$Game.winStatus) {\n        document.querySelector(\".game-field__game-win\").style.display = \"flex\";\n        document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$eventListener);\n        setTimeout(()=>{\n            document.querySelector(\".game-field__game-win\").style.opacity = \"1\";\n            document.querySelector(\".message-win\").classList.remove(\"hidden\");\n        }, 10);\n    }\n}\ndocument.body.querySelector(\".button\").addEventListener(\"click\", ()=>{\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n    if ($09e991522ca7e64e$var$Game.isGameStarted) {\n        $09e991522ca7e64e$var$Game.FIELD.forEach((elem, row)=>{\n            elem.forEach((secEl, column)=>{\n                $09e991522ca7e64e$var$Game.FIELD[row][column] = 0;\n            });\n        });\n        $09e991522ca7e64e$var$HTML_CELLS.forEach((cell)=>{\n            cell.innerHTML = \"\";\n            while(cell.firstChild)cell.removeChild(cell.firstChild);\n        });\n        document.body.querySelector(\"button\").classList = \"button start\";\n        document.body.querySelector(\"button\").innerHTML = \"Start\";\n        document.body.querySelector(\".game-score\").innerHTML = \"0\";\n        document.body.querySelector(\".game-field__game-over\").style.display = \"none\";\n        document.body.querySelector(\".game-field__game-win\").style.display = \"none\";\n        document.body.querySelector(\".message-lose\").classList.add(\"hidden\");\n        document.body.querySelector(\".message-win\").classList.add(\"hidden\");\n        // document.body.querySelector('.message-start').classList.remove('hidden');\n        $09e991522ca7e64e$var$Game.madeMove = false;\n        $09e991522ca7e64e$var$Game.score = 0;\n    }\n    if (!$09e991522ca7e64e$var$Game.madeMove) {\n        setTimeout(()=>{\n            $09e991522ca7e64e$var$Game.randomCell($09e991522ca7e64e$var$Game.FIELD);\n            $09e991522ca7e64e$var$Game.randomCell($09e991522ca7e64e$var$Game.FIELD);\n            $09e991522ca7e64e$var$Game.visualize($09e991522ca7e64e$var$Game.FIELD, $09e991522ca7e64e$var$Game.HTML_MATRIX, $09e991522ca7e64e$var$Game.moveList);\n        }, 50);\n        document.querySelector(\".button\").classList = \"button restart\";\n        document.querySelector(\".button\").innerText = \"Restart\";\n        $09e991522ca7e64e$var$Game.isGameStarted = true;\n    }\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$eventListener);\n});\n\n\n//# sourceMappingURL=index.6b14ee4d.js.map\n","'use strict';\n\nconst { GameClass } = require('./modules/Game.class');\n\nconst HTML_CELLS = document.querySelectorAll('.field-cell');\nconst Game = new GameClass(HTML_CELLS);\n\nGame.FIELD = GameClass.makeMatrix();\nGame.moveList = GameClass.makeMatrix();\nGame.HTML_MATRIX = GameClass.makeMatrix(HTML_CELLS);\n\nfunction eventListener(keyEvent) {\n  const PREV_FIELD = Game.FIELD.map((elem) => [...elem]);\n\n  Game.madeMove = true;\n\n  Game.moveField(Game.FIELD, keyEvent.key, Game.moveList);\n  Game.visualize(keyEvent.key, PREV_FIELD);\n\n  for (let i = 0; i < Game.moveList.length; i++) {\n    for (let j = 0; j < Game.moveList.length; j++) {\n      Game.moveList[i][j] = 0;\n    }\n  }\n\n  document.querySelector('.game-score').innerText = `${Game.score}`;\n\n  if (\n    !Game.canMoveHorizontaly(Game.FIELD)\n    && !Game.canMoveVerticaly(Game.FIELD)\n    && !Game.hasEmptySpace(Game.FIELD)\n  ) {\n    document.querySelector('.game-field__game-over').style.display = 'flex';\n    document.removeEventListener('keydown', eventListener);\n\n    setTimeout(() => {\n      document.querySelector('.game-field__game-over').style.opacity = '1';\n      document.querySelector('.message-lose').classList.remove('hidden');\n    }, 10);\n  } else if (Game.winStatus) {\n    document.querySelector('.game-field__game-win').style.display = 'flex';\n    document.removeEventListener('keydown', eventListener);\n\n    setTimeout(() => {\n      document.querySelector('.game-field__game-win').style.opacity = '1';\n      document.querySelector('.message-win').classList.remove('hidden');\n    }, 10);\n  }\n}\n\ndocument.body.querySelector('.button').addEventListener('click', () => {\n  document.querySelector('.message-start').classList.add('hidden');\n\n  if (Game.isGameStarted) {\n    Game.FIELD.forEach((elem, row) => {\n      elem.forEach((secEl, column) => {\n        Game.FIELD[row][column] = 0;\n      });\n    });\n\n    HTML_CELLS.forEach((cell) => {\n      cell.innerHTML = '';\n\n      while (cell.firstChild) {\n        cell.removeChild(cell.firstChild);\n      }\n    });\n\n    document.body.querySelector('button').classList = 'button start';\n    document.body.querySelector('button').innerHTML = 'Start';\n    document.body.querySelector('.game-score').innerHTML = '0';\n\n    document.body.querySelector('.game-field__game-over').style.display\n      = 'none';\n\n    document.body.querySelector('.game-field__game-win').style.display = 'none';\n\n    document.body.querySelector('.message-lose').classList.add('hidden');\n    document.body.querySelector('.message-win').classList.add('hidden');\n    // document.body.querySelector('.message-start').classList.remove('hidden');\n    Game.madeMove = false;\n    Game.score = 0;\n  }\n\n  if (!Game.madeMove) {\n    setTimeout(() => {\n      Game.randomCell(Game.FIELD);\n      Game.randomCell(Game.FIELD);\n      Game.visualize(Game.FIELD, Game.HTML_MATRIX, Game.moveList);\n    }, 50);\n\n    document.querySelector('.button').classList = 'button restart';\n    document.querySelector('.button').innerText = 'Restart';\n    Game.isGameStarted = true;\n  }\n\n  document.addEventListener('keydown', eventListener);\n});\n","'use strict';\n\nclass GameClass {\n  constructor(DOM_CELLS) {\n    this.HTML_CELLS = DOM_CELLS;\n    this.HTML_MATRIX = [];\n    this.madeMove = false;\n    this.isGameStarted = false;\n    this.winStatus = false;\n    this.score = 0;\n  }\n\n  randomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  static makeMatrix(array) {\n    const OUTPUT_ARRAY = [];\n    let counter = 0;\n\n    if (!array) {\n      for (let i = 0; i < 4; i++) {\n        OUTPUT_ARRAY.push([]);\n\n        for (let j = 0; j < 4; j++) {\n          OUTPUT_ARRAY[i].push(0);\n        }\n      }\n    }\n\n    if (array) {\n      for (let row = 0; row < array.length / 4; row++) {\n        OUTPUT_ARRAY.push([]);\n\n        for (let column = 0; column < array.length / 4; column++) {\n          OUTPUT_ARRAY[row].push(array[counter]);\n          counter++;\n        }\n      }\n    }\n\n    return OUTPUT_ARRAY;\n  }\n\n  rotateMatrix(matrix) {\n    const matrixCopy = matrix.map((elem) => [...elem]);\n\n    for (let row = 0; row < matrix.length; row++) {\n      for (let column = 0; column < matrix[row].length; column++) {\n        matrixCopy[row][column] = matrix[matrix.length - 1 - column][row];\n      }\n    }\n\n    return matrixCopy;\n  }\n\n  reverseRotate(matrix) {\n    const matrixCopy = matrix.map((elem) => [...elem]);\n\n    for (let row = 0; row < matrix.length; row++) {\n      for (let column = 0; column < matrix[row].length; column++) {\n        matrixCopy[row][column] = matrix[column][matrix[row].length - 1 - row];\n      }\n    }\n\n    return matrixCopy;\n  }\n\n  randomCell(matrix) {\n    const FREE_FIELD_CELLS = [];\n\n    for (let row = 0; row < matrix.length; row++) {\n      const tempRow = [row];\n\n      for (let column = 0; column < matrix[row].length; column++) {\n        if (matrix[row][column] === 0) {\n          tempRow.push(column);\n        }\n      }\n\n      if (tempRow.length > 1) {\n        FREE_FIELD_CELLS.push(tempRow);\n      }\n    }\n\n    const INDEX_OF_RANDOM_ROW = this.randomNumber(0, FREE_FIELD_CELLS.length);\n    const RANDOM_ROW = FREE_FIELD_CELLS[INDEX_OF_RANDOM_ROW];\n\n    if (RANDOM_ROW) {\n      const RANDOM_CELL = this.randomNumber(1, RANDOM_ROW.length);\n\n      const CELL_VALUE = Math.random() < 0.9 ? 2 : 4;\n\n      const selectedRow = RANDOM_ROW[0];\n      const selectedColumn = RANDOM_ROW[RANDOM_CELL];\n\n      matrix[selectedRow][selectedColumn] = CELL_VALUE;\n\n      return [selectedRow, selectedColumn];\n    }\n  }\n\n  canMoveVerticaly(matrix) {\n    for (let i = 0; i < matrix.length; i++) {\n      for (let j = 0; j < matrix[i].length - 1; j++) {\n        if (matrix[i][j] === matrix[i][j + 1]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  canMoveHorizontaly(matrix) {\n    for (let i = 0; i < matrix.length - 1; i++) {\n      for (let j = 0; j < matrix[i].length; j++) {\n        if (matrix[i][j] === matrix[i + 1][j]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  hasEmptySpace(matrix) {\n    for (let i = 0; i < matrix.length; i++) {\n      for (let j = 0; j < matrix[i].length; j++) {\n        if (matrix[i][j] === 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  moveLeft(matrix, row, data, repeat) {\n    const moveCount = this.moveList;\n    const tempRow = matrix[row];\n\n    for (let column = 0; column < tempRow.length; column++) {\n      if (tempRow[column] !== 0) {\n        let columnCopy = column;\n\n        for (let i = column - 1; i >= 0; i--) {\n          if (tempRow[i] === 0) {\n            if (!repeat) {\n              tempRow[i] = tempRow[columnCopy];\n              moveCount[row][column]++;\n\n              tempRow[columnCopy] = 0;\n\n              if (!data[column].after) {\n                data[column].after = column;\n                data[column].before = column;\n              }\n\n              data[column].after--;\n              data[column].before = column;\n              columnCopy--;\n            }\n\n            if (repeat) {\n              let isObjectEmpty = true;\n\n              tempRow[i] = tempRow[columnCopy];\n              tempRow[columnCopy] = 0;\n\n              data.forEach((elem) => {\n                if (elem.after === columnCopy) {\n                  moveCount[row][elem.before]++;\n                  isObjectEmpty = false;\n                }\n              });\n\n              if (isObjectEmpty) {\n                for (let limith = column; limith < tempRow.length; limith++) {\n                  if (tempRow[limith] === 0) {\n                    moveCount[row][limith]++;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return tempRow;\n  }\n\n  moveRight(matrix, row, data, repeat) {\n    const moveCount = this.moveList;\n    const tempRow = matrix[row];\n\n    for (let column = tempRow.length - 1; column >= 0; column--) {\n      if (tempRow[column] !== 0) {\n        let columnCopy = column;\n\n        for (let i = column + 1; i < tempRow.length; i++) {\n          if (tempRow[i] === 0) {\n            if (!repeat) {\n              tempRow[i] = tempRow[columnCopy];\n              moveCount[row][column]++;\n              tempRow[columnCopy] = 0;\n\n              if (!data[column].after) {\n                data[column].after = column;\n              }\n\n              data[column].after++;\n              data[column].before = column;\n              columnCopy++;\n            }\n\n            if (repeat) {\n              let isObjectEmpty = true;\n\n              tempRow[i] = tempRow[columnCopy];\n              tempRow[columnCopy] = 0;\n\n              data.forEach((elem) => {\n                if (elem.after === columnCopy) {\n                  moveCount[row][elem.before]++;\n                  isObjectEmpty = false;\n                }\n              });\n\n              if (isObjectEmpty) {\n                for (let limith = column; limith >= 0; limith--) {\n                  if (tempRow[limith] === 0) {\n                    moveCount[row][limith]++;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return tempRow;\n  }\n\n  mergeLeft(tempRow, data, moveCount) {\n    for (let i = 0; i < tempRow.length; i++) {\n      if (tempRow[i] === tempRow[i + 1] && tempRow[i] !== 0) {\n        tempRow[i] += tempRow[i + 1];\n        this.score += tempRow[i];\n\n        let isObjectEmpty = true;\n\n        data.forEach((elem) => {\n          if (elem.after === i + 1) {\n            moveCount[elem.before]++;\n            isObjectEmpty = false;\n          }\n        });\n\n        if (isObjectEmpty) {\n          moveCount[i + 1]++;\n        }\n\n        tempRow[i + 1] = 0;\n        i++;\n      }\n    }\n  }\n\n  mergeRight(tempRow, data, moveCount) {\n    for (let i = tempRow.length - 1; i >= 0; i--) {\n      if (tempRow[i] === tempRow[i - 1] && tempRow[i] !== 0) {\n        tempRow[i] += tempRow[i - 1];\n        this.score += tempRow[i];\n\n        let isObjectEmpty = true;\n\n        data.forEach((elem) => {\n          if (elem.after === i - 1) {\n            moveCount[elem.before]++;\n            isObjectEmpty = false;\n          }\n        });\n\n        if (isObjectEmpty) {\n          moveCount[i - 1]++;\n        }\n\n        tempRow[i - 1] = 0;\n        i--;\n      }\n    }\n  }\n\n  moveField(field, direction, moveCount) {\n    const reversedField = this.rotateMatrix(field);\n\n    for (let i = 0; i < field.length; i++) {\n      let tempRow = field[i];\n      const moveData = [{}, {}, {}, {}];\n      let repeat = 0;\n\n      switch (direction) {\n        case 'ArrowLeft':\n          tempRow = this.moveLeft(field, i, moveData, repeat);\n          repeat = 1;\n          this.mergeLeft(tempRow, moveData, moveCount[i]);\n          field[i] = tempRow;\n          field[i] = this.moveLeft(field, i, moveData, repeat);\n          break;\n\n        case 'ArrowRight':\n          tempRow = this.moveRight(field, i, moveData, repeat);\n          repeat = 1;\n          this.mergeRight(tempRow, moveData, moveCount[i]);\n          field[i] = tempRow;\n          field[i] = this.moveRight(field, i, moveData, repeat);\n          break;\n\n        case 'ArrowUp':\n          tempRow = this.moveRight(reversedField, i, moveData, repeat);\n          repeat = 1;\n          this.mergeRight(tempRow, moveData, moveCount[i]);\n          field[i] = tempRow;\n\n          field[i] = this.moveRight(\n            reversedField,\n            i,\n            moveCount,\n            moveData,\n            repeat,\n          );\n          break;\n\n        case 'ArrowDown':\n          tempRow = this.moveLeft(reversedField, i, moveData, repeat);\n          repeat = 1;\n          this.mergeLeft(tempRow, moveData, moveCount[i]);\n          field[i] = tempRow;\n          field[i] = this.moveLeft(reversedField, i, moveData, repeat);\n          break;\n      }\n    }\n\n    if (direction === 'ArrowUp' || direction === 'ArrowDown') {\n      field.forEach((elem, i) => {\n        field[i] = this.reverseRotate(reversedField)[i];\n      });\n\n      this.moveList = this.reverseRotate(moveCount);\n    }\n  }\n\n  visualize(direction, prevField) {\n    const field = this.FIELD;\n    const htmlField = this.HTML_MATRIX;\n    const moveCount = this.moveList;\n    let prevFieldCopy = prevField;\n\n    if (!prevField) {\n      prevFieldCopy = field;\n    }\n\n    let counter = 0;\n    let canMove = true;\n\n    for (let i = 0; i < prevFieldCopy.length; i++) {\n      for (let j = 0; j < prevFieldCopy[i].length; j++) {\n        if (prevFieldCopy[i][j] === field[i][j]) {\n          counter++;\n        }\n      }\n    }\n\n    if (counter === field.length * field.length) {\n      canMove = false;\n    }\n\n    for (let row = 0; row < prevFieldCopy.length; row++) {\n      for (let column = 0; column < prevFieldCopy[row].length; column++) {\n        while (htmlField[row][column].firstChild) {\n          htmlField[row][column].removeChild(htmlField[row][column].lastChild);\n        }\n\n        const HTML_CELL = document.createElement('div');\n\n        HTML_CELL.innerText = '';\n        HTML_CELL.classList = '';\n\n        if (prevFieldCopy[row][column] > 0) {\n          HTML_CELL.style.zIndex = '2';\n          HTML_CELL.innerText = `${prevFieldCopy[row][column]}`;\n\n          this.animateMovement(HTML_CELL, direction, moveCount[row][column]);\n\n          HTML_CELL.classList = `\n          field-cell\n          field-cell--inner-block\n          field-cell--${prevFieldCopy[row][column]}`;\n          htmlField[row][column].appendChild(HTML_CELL);\n        }\n      }\n    }\n\n    setTimeout(() => {\n      for (let row = 0; row < field.length; row++) {\n        for (let column = 0; column < field[row].length; column++) {\n          const HTML_EL = htmlField[row][column];\n\n          while (HTML_EL.firstChild) {\n            HTML_EL.removeChild(HTML_EL.lastChild);\n          }\n\n          const HTML_CELL = document.createElement('div');\n\n          HTML_CELL.innerText = '';\n          HTML_CELL.classList = '';\n\n          if (field[row][column] > 0) {\n            HTML_CELL.style.zIndex = '2';\n            HTML_CELL.innerText = `${field[row][column]}`;\n\n            HTML_CELL.classList = `\n            field-cell\n            field-cell--inner-block\n            field-cell--${field[row][column]}`;\n            htmlField[row][column].appendChild(HTML_CELL);\n          }\n          moveCount[row][column] = 0;\n        }\n      }\n\n      if (this.hasEmptySpace(field) && canMove && this.madeMove) {\n        const HTML_CELL = document.createElement('div');\n\n        setTimeout(() => {\n          const COORDS = this.randomCell(field);\n\n          HTML_CELL.innerText = `${field[COORDS[0]][COORDS[1]]}`;\n\n          HTML_CELL.classList = `\n          field-cell\n          field-cell--inner-block\n          only-created\n          field-cell--${field[COORDS[0]][COORDS[1]]}`;\n          htmlField[COORDS[0]][COORDS[1]].appendChild(HTML_CELL);\n        }, 100);\n      }\n    }, 50);\n  }\n\n  animateMovement(HTML_CELL, direction, MOVE_SCORE) {\n    const SELL_SIZE = 85;\n    const TOTAL_PATH = SELL_SIZE * MOVE_SCORE;\n    let moveDirection = '';\n    let movement = 0;\n\n    switch (direction) {\n      case 'ArrowUp':\n        moveDirection = 'top';\n        break;\n      case 'ArrowDown':\n        moveDirection = 'bottom';\n        break;\n      case 'ArrowLeft':\n        moveDirection = 'left';\n        break;\n      case 'ArrowRight':\n        moveDirection = 'right';\n        break;\n    }\n\n    HTML_CELL.style[moveDirection] = 0 + 'px';\n    HTML_CELL.style.zIndex = '1';\n\n    setTimeout(() => {\n      movement += TOTAL_PATH / MOVE_SCORE;\n\n      if (movement >= TOTAL_PATH) {\n        movement = TOTAL_PATH;\n      }\n\n      HTML_CELL.style[moveDirection] = -TOTAL_PATH + 'px';\n    }, 10);\n  }\n\n  checkWinState() {\n    const FIELD = this.FIELD;\n\n    FIELD.forEach((row) => {\n      row.forEach((column) => {\n        if (column === 2048) {\n          this.winStatus = true;\n        }\n      });\n    });\n\n    return this.winStatus;\n  }\n}\n\nmodule.exports = { GameClass };\n"],"names":["$09e991522ca7e64e$require$GameClass","$2806d5ddb68cb1e7$exports","GameClass","constructor","DOM_CELLS","HTML_CELLS","HTML_MATRIX","madeMove","isGameStarted","winStatus","score","randomNumber","min","max","Math","floor","random","makeMatrix","array","OUTPUT_ARRAY","counter","i","push","j","row","length","column","rotateMatrix","matrix","matrixCopy","map","elem","reverseRotate","randomCell","FREE_FIELD_CELLS","tempRow","INDEX_OF_RANDOM_ROW","RANDOM_ROW","RANDOM_CELL","CELL_VALUE","selectedRow","selectedColumn","canMoveVerticaly","canMoveHorizontaly","hasEmptySpace","moveLeft","data","repeat","moveCount","moveList","columnCopy","after","before","isObjectEmpty","forEach","limith","moveRight","mergeLeft","mergeRight","moveField","field","direction","reversedField","moveData","visualize","prevField","FIELD","htmlField","prevFieldCopy","canMove","firstChild","removeChild","lastChild","HTML_CELL","document","createElement","innerText","classList","style","zIndex","animateMovement","appendChild","setTimeout","HTML_EL","COORDS","MOVE_SCORE","TOTAL_PATH","SELL_SIZE","moveDirection","movement","checkWinState","$09e991522ca7e64e$var$HTML_CELLS","querySelectorAll","$09e991522ca7e64e$var$Game","$09e991522ca7e64e$var$eventListener","keyEvent","PREV_FIELD","key","querySelector","display","removeEventListener","opacity","remove","body","addEventListener","add","secEl","cell","innerHTML"],"version":3,"file":"index.6b14ee4d.js.map"}